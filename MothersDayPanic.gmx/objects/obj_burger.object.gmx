<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_burger</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>obj_cookable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Burger Variables

event_inherited();

image_speed = 0;
image_index = 0;
item_name = "burger";
item_type = "food";
place_cooked = "grill";
burger_temp = "raw";
flippable = true;
draggable = true;
side = "a";

cook_start = 0;

side_a_cooked = 0;
side_a_cooked_old = 0;
a_temp = "raw";
side_b_cooked = 0;
side_b_cooked_old = 0;
b_temp = "raw";
even_cook = false;

flip_bot = false;
flip_top = false;
just_flipped = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// cooking the burger

event_inherited();

if(cooking){//you will have to come up with a fix for if the hour changes while cooking
   if (side == "a"){
      side_a_cooked = side_a_cooked_old + (obj_clock.cur_min - cook_start);
   } else if (side == "b"){
      side_b_cooked = side_b_cooked_old + (obj_clock.cur_min - cook_start);
   }
   if(side == "a"){
       if(side_a_cooked &lt; 2) {
          a_temp = "raw";
          image_index = 0;
       } else if(side_a_cooked &lt; 3) {
          a_temp = "mid-rare";
          image_index = 1;
       } else if(side_a_cooked &lt; 4) {
          a_temp = "medium";
          image_index = 2;
       } else if(side_a_cooked &lt; 6) {
          a_temp = "mid-well";
          image_index = 3;
       } else if(side_a_cooked &lt; 8) {
          a_temp = "well";
          image_index = 4;
       } else if(side_a_cooked &lt; 10) {
          a_temp = "hockey-puck";
          image_index = 5;
       } else if(side_a_cooked  &gt; 9) {
          a_temp = "ash";
          image_index = 6;
       }
   } else{
       if(side_b_cooked &lt; 2) {
          b_temp = "raw";
          image_index = 0;
       } else if(side_b_cooked &lt; 3) {
          b_temp = "mid-rare";
          image_index = 1;
       } else if(side_b_cooked &lt; 4) {
          b_temp = "medium";
          image_index = 2;
       } else if(side_b_cooked &lt; 6) {
          b_temp = "mid-well";
          image_index = 3;
       } else if(side_b_cooked &lt; 8) {
          b_temp = "well";
          image_index = 4;
       } else if(side_b_cooked &lt; 10) {
          b_temp = "hockey-puck";
          image_index = 5;
       } else if(side_b_cooked  &gt; 9) {
          b_temp = "ash";
          image_index = 6;
       }
   
   
   
   }
   //set burger temp to the highest temp
   if(side_a_cooked &gt; side_b_cooked &amp;&amp; side_b_cooked != 0){
       burger_temp = a_temp;
       even_cook = false;
       
   } else if (side_a_cooked &lt; side_b_cooked &amp;&amp; side_a_cooked != 0){
       burger_temp = b_temp;
       even_cook = false;
   } else{
       burger_temp = a_temp;
       even_cook = true;
   }
   
   
   //flipping the burger
   if(input.left_down &amp;&amp; global.hand == "spatula" &amp;&amp; !just_flipped){
       if(!flip_bot &amp;&amp; mouse_x &gt; x - 17 &amp;&amp; mouse_x &lt; x + 17
        &amp;&amp; mouse_y &gt; y + 8 &amp;&amp; mouse_y &lt; y + 24){
            flip_bot = true;
            //obj_clock.cur_time = "FLIP BOTTOM";
        } else if (flip_bot &amp;&amp; mouse_x &gt; x - 17 &amp;&amp; mouse_x &lt; x + 17
        &amp;&amp; mouse_y &gt; y - 24 &amp;&amp; mouse_y &lt; y - 8){
            flip_top = true;
            //obj_clock.cur_time = "FLIP TOP";            
            cook_start = obj_clock.cur_min;
            
            if(side == "a"){
                side_a_cooked_old = side_a_cooked;
                cooking = false;
                side = "b";
                cooking = true;
                just_flipped = true;
            } else if (side == "b"){
                side_b_cooked_old = side_b_cooked;
                cooking = false;
                side = "a";
                cooking = true;
                just_flipped = true;
            }
        }
   
   
   
   
   } else{
       flip_bot = false;
       flip_top = false;
   }
   
} else {
  side_a_cooked_old = side_a_cooked;
  side_b_cooked_old = side_b_cooked;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_grill">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(!dragging &amp;&amp; !cooking){
   cooking = true;
   
   cook_start = obj_clock.cur_min;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

event_inherited();

flip_bot = false;
flip_top = false;
just_flipped = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
